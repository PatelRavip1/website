---

---

<header>
    <div class="header">
        <div class="clock">
            <svg
                class="clockface"
                width="150"
                height="150"
                viewBox="-150 -150 300 300"
            >
                <circle class="ring ring--seconds" r="145" pathLength="60"
                ></circle>
                <circle class="ring ring--hours" r="145" pathLength="12"
                ></circle>
                <text x="50" y="0" class="date">12</text>
                <text x="-13    " y="-40" class="am-pm">am</text>
                <text x="0" y="-70" class="day-night">🌙</text>
                <line
                    id="minute"
                    class="hand--minute"
                    x1="0"
                    y1="2"
                    x2="0"
                    y2="-110"></line>
                <line id="hour" class="hand--hour" x1="0" y1="2" x2="0" y2="-70"
                ></line>
                <circle class="ring ring--center" r="3"></circle>
                <line
                    id="second"
                    class="hand hand--second"
                    x1="0"
                    y1="12"
                    x2="0"
                    y2="-130"></line>
            </svg>
            <script>
                interface SunTimes {
                    sunrise: string;
                    sunset: string;
                    first_light: string;
                    last_light: string;
                    dawn: string;
                    dusk: string;
                    solar_noon: string;
                    golden_hour: string;
                    day_length: string;
                    timezone: string;
                    utc_offset: number;
                }
                async function fetchSunTimes(): Promise<SunTimes> {
                    const response = await fetch(
                        "https://api.sunrisesunset.io/json?lat=42.1626&lng=-71.04116",
                    );
                    const data = await response.json();
                    return data.results; // This should match the SunTimes structure
                }
                function convertTo24HourFormat(
                    timeString: string,
                ): [number, number] {
                    const [time, modifier] = timeString.split(" ");
                    let [hours, minutes] = time.split(":").map(Number);
                    if (modifier === "PM" && hours !== 12) {
                        hours += 12; // Convert PM hours to 24-hour format
                    } else if (modifier === "AM" && hours === 12) {
                        hours = 0; // Convert midnight hour (12 AM) to 0
                    }
                    return [hours, minutes]; // Return as an array
                }
                function updateClock(sunTimes: SunTimes) {
                    const now = new Date();
                    const bostonTime = now.toLocaleString("en-US", {
                        timeZone: "America/New_York",
                        hour: "numeric",
                        minute: "numeric",
                        second: "numeric",
                        hour12: false,
                        fractionalSecondDigits: 3,
                    });
                    const [hours, minutes, seconds] = bostonTime
                        .split(":")
                        .map(Number);
                    const [sunriseHours, sunriseMinutes] =
                        convertTo24HourFormat(sunTimes.sunrise);
                    const [sunsetHours, sunsetMinutes] = convertTo24HourFormat(
                        sunTimes.sunset,
                    );
                    // Convert sunrise and sunset to minutes since midnight for easier comparison
                    const sunriseTotalMinutes =
                        sunriseHours * 60 + sunriseMinutes;
                    const sunsetTotalMinutes = sunsetHours * 60 + sunsetMinutes;
                    const currentTotalMinutes = hours * 60 + minutes;
                    const secondsAngle = (seconds / 60) * 360;
                    const minutesAngle = ((minutes + seconds / 60) / 60) * 360;
                    const hoursAngle =
                        (((hours % 12) + minutes / 60) / 12) * 360;
                    const secondHand = document.getElementById("second");
                    const minuteHand = document.getElementById("minute");
                    const hourHand = document.getElementById("hour");
                    const dateElement = document.querySelector(".date");
                    const amPmElement = document.querySelector(".am-pm");
                    const dayNightElement =
                        document.querySelector(".day-night");
                    if (secondHand)
                        secondHand.style.transform = `rotate(${secondsAngle}deg)`;
                    if (minuteHand)
                        minuteHand.style.transform = `rotate(${minutesAngle}deg)`;
                    if (hourHand)
                        hourHand.style.transform = `rotate(${hoursAngle}deg)`;
                    if (dateElement)
                        dateElement.textContent = String(now.getDate());
                    if (amPmElement)
                        amPmElement.textContent = hours >= 12 ? "PM" : "AM";
                    // Determine day or night based on sunrise and sunset
                    if (dayNightElement) {
                        if (
                            currentTotalMinutes >= sunriseTotalMinutes &&
                            currentTotalMinutes < sunsetTotalMinutes
                        ) {
                            dayNightElement.textContent = "☀️"; // Day
                        } else {
                            dayNightElement.textContent = "🌙"; // Night
                        }
                    }
                }
                async function startClock() {
                    let sunTimes = await fetchSunTimes();
                    updateClock(sunTimes); // Initial call
                    setInterval(() => updateClock(sunTimes), 60); // Update clock every second

                    // Fetch new sunrise/sunset times every 30 minutes (1800000 ms)
                    setInterval(async () => {
                        sunTimes = await fetchSunTimes();
                    }, 1800000);
                }
                startClock(); // Start the clock and fetch sunrise/sunset times
            </script>
        </div>
        <!-- <div class="time">
            <span id="boston-date"></span><br />
            <span id="boston-time"></span>
            <script>
                function updateTime() {
                    const dateTimeFormat = new Intl.DateTimeFormat("en-US", {
                        timeZone: "America/New_York",
                        hour: "numeric",
                        minute: "numeric",
                        second: "numeric",
                    });
                    const dateFormate = new Intl.DateTimeFormat("en-US", {
                        timeZone: "America/New_York",
                        day: "numeric",
                        month: "short",
                        year: "numeric",
                    });
                    const dateString = dateFormate.format(new Date());
                    const timeString = dateTimeFormat.format(new Date());
                    const timeElement = document.getElementById("boston-time");
                    const dateElement = document.getElementById("boston-date");
                    if (timeElement) {
                        timeElement.textContent = timeString;
                    }
                    if (dateElement) {
                        dateElement.textContent = dateString;
                    }
                }
                // Update every second
                setInterval(updateTime, 1000);
                updateTime(); // Initial call
            </script>
        </div> -->
    </div>
    <style>
        .header {
            display: flex;
            justify-content: right;
            font-size: 15px;
        }

        .clock {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            margin: 1rem;
            z-index: 1000;
            border-radius: 50%;
            border: #0e1116 solid 3px;
            box-shadow:
                0 -15px 15px rgba(255, 255, 255, 0.05),
                0 15px 15px rgba(0, 0, 0, 0.3),
                inset 0 -15px 15px rgba(255, 255, 255, 0.05),
                inset 0 15px 15px rgba(0, 0, 0, 0.3);
            transition: all ease 0.2s;
        }

        .clockface {
            filter: drop-shadow(2px 10px 10px dark);
        }

        .ring--seconds,
        .ring--hours {
            r: 140;
            fill: transparent;
            stroke-width: 5px;
        }

        .ring--seconds {
            fill: #0e1116;
            stroke: white;
            stroke-dasharray: 0.1 0.9;
            stroke-dashoffset: 0.05;
        }

        .ring--hours {
            stroke: #5bdeff;
            stroke-dasharray: 0.05 0.95;
            stroke-dashoffset: 0.025;
        }

        .ring--center {
            fill: pink;
            stroke: white;
            stroke-width: 2.5;
        }

        .hand {
            stroke: pink;
            stroke-linecap: round;
            stroke-width: 2;
        }

        .hand--hour,
        .hand--minute {
            stroke-width: 5;
            stroke-linecap: round;
        }

        .hand--hour {
            transform: rotate(15deg);
            stroke: white;
            border-radius: 6px;
        }

        .hand--minute {
            stroke: #93bef4;
            transform: rotate(30deg);
        }

        .date {
            fill: white;
            font-size: 2.5rem;
        }

        .am-pm {
            fill: #93bef4;
            font-size: 1.5rem;
            text-transform: uppercase;
        }
        .day-night {
            font-size: 2.5rem;
            fill: white; /* Adjust as needed */
            text-anchor: middle; /* Center the text */
            opacity: 0.7; /* Adjust opacity value (0.0 to 1.0) */
            /* transition: opacity 0.3s ease; */
        }
    </style>
</header>
